### USER
### USER
what you see here is a novel code execution environment which interacts with markdown page that the code is hosted in. This uses logseq. It is conceptually similar to a jupyter nodebook. Do you understand what you're seeing here? Ask any clarifying questions you need. This is not how logseq renders the page, but rather how the logseq style markdown is stored

public:: true

- # LogCaster
	- A podcast creation engine underpinned by a logseq knowledge graph and multi agent framework
- # Automated Daily News Podcast Generation
	- This project aims to develop a sophisticated toolchain using FastAPI and OpenWebUI to automate the creation of a daily news podcast. The goal is to seamlessly integrate various modules and pipelines to process breaking news items, selecting only for interesting and unusual combinations of thing. The system will then generate structured content through a multi agent approach, mediated by a single API interface, and ultimately produce a compelling podcast featuring two interlocutors, Bob and Sue.
- ## Workflow Overview
- **Parse Logseq**: A logseq executed python block parses the current logseq markdown page to find the IP address of the openwebui server specified here
	- ```text
	  192.168.0.51
	  ```
- **Request the model list from the openwebui on the API IP above. Use this access token
	- ```text
	  Authorization: Bearer sk-6f3f39171ba247b4a66093287305fabc
	  ```
	- direct command to LLM - you should rewrite this curl command to use python in the embedded logseq style shown here.
- ```text
  curl -s -X GET "http://192.168.0.51:3000/api/v1/models/?id=" -H "accept: application/json" -H "Authorization: Bearer thisisnotanaccesstoken" | jq -r '.[].name'
  ```
- **List is returned**: and should be written directly into this logseq page in the block labelled below the code
	- ## Model list
		- ```text
		  Models returned from the OpenWebUI API should be listed here on one line each
		  ```
- **Select Agent Models** The user can copy paste model names into the agent slots here:
	- ## Nominated Agents
		- Web Search
			- ```text
			  Perplexity
			  ```
		- Rating the news
			- ```text
			  Mistral 8B
			  ```
		- etc
- **Loading Topics**: Search the logseq knowledge graph for the tagged public pages. Create a list of any pages above 100kb in size. Note Python will load the first time this block is evaluated.
	- ```python
	  import js
	  
	  def list_public_pages():
	      try:
	          pages = js.logseq.api.get_all_pages()
	          public_pages = []
	          for page in pages:
	              page_name = page.originalName
	              # Get the first block of the page which typically contains metadata
	              content = js.logseq.api.get_page_blocks_tree(page_name)
	              if content and "public:: true" in content[0].content:
	                  public_pages.append(page_name)
	          return public_pages
	      except Exception as e:
	          js.logseq.api.show_msg(f"Error in list_public_pages: {e}", {'timeout': 5000})
	          return []
	  
	  def main():
	      public_pages = list_public_pages()
	      if public_pages:
	          result = ", ".join(public_pages)
	      else:
	          result = "No public pages found."
	      return result
	  
	  # Execute the main function
	  main()
	  ```
		- {{evalparent}}
		- ## Topics with more than 100kb
			- Topic 1
			- Topic 2
			- This list should be replaced inside this file by the code
- **User Elects Topics**: Present the public list to the user in a logseq block (above), as line separated topics. User selects their topics of choice from the public pages via simple deletion of unimportant lines. This selection then remains stored in the logseq page which is the execution environment.
- **Randomly Select Topics**: The next block of execuatble logseq code, when exedcuted, selects 2 or 3 (at random) topics from the list of radio button active public pages. The code overwrites the content of the logseq block which starts ### Trying these topics - topic 1 - topic 2 - topic 3 on their own indented lines
- **Searching for News**: The same code block then called the perplexity pipeline which is available in the model list above, using the openwebui unified API, to search for breaking news items (surfaced as news in the past 5 days) that intersect with 2 or three randomly loaded topics.
- **Ranking Importance**: Evaluate the returned news item using a locally hosted Mixtral 8B Language Model (LLM), called from the list of available models. Request a score on likely impact and public interest on a scale from 1 to 10.
- **Branching facttor**: IF the news item scores over 8 then pass the Perplexity-generated content to GPT-4 if not then select another 2 or 3 public tagged topics and repeat. Execute a maximum of 10 times. if 10 attemtps do not surface a news item of worth then alert the user here in the logseq output.
- **Extract web links**: Create a simple list of raw urls found in the perlexity response, and remove duplicates.
- **Detailed Information Scraping**: Process the identified links using the web scraper module in the models list from openwebui, to fetch in-depth summaries and additional content from the linked pages.
- **Or Progress News Item**: Use GPT4oV model from the models list, through the openwebui API, sending the raw perplexity response, all of the ancilliary summaries gathered from the web scraper.  Returns from GPT4oV should be a detailed and highly technical description of the news item into json format, with the web urls and their summaries carefully segmented and linked as a knowledge graph in the json structure using linkedJson.
- **Send the text elements of the GPT4 generated json to the ragflow module in the models list, requesting that the knowledge be modfied to include any opinions and ideas from the RAG corpus which intersect with the news item. Save the response from this call to logseq block in the current page which is headed # Story Plus RAG
- **Generating Podcast Script**: Use Claude 3.5, send the few shot examples of podcast chat from the logseq page labelled [[example podcast dialogue]] along with the RAGflow optimised news story, and all of the json structured web links and their summaries. Request to craft a compelling podcast script. The script should alternate dialogue between Bob and Sue, incorporating brief mentions of the web sources available in the episode notes. The returned json from Claude 3.5 should have field identifiers for bob and sue. 
  **Splitting Script**: Divide the podcast script into parts for Bob and Sue, creative two new json files which have sequence numbers for the conversation.
- **Text to Voice Conversion**: Pass both scripts to text-to-voice engines to generate the audio for Bob and Sue's lines respectively. Insist that the audio be returned with the sequence numbers.
- **Inline python code block creates wav file": The json is parsed to recombine the returned audio elements, rendering a new single wav file.
  **Synchronization with Metahuman**: Synchronize the generated audio tracks with Metahuman talking heads in Unreal Engine to create a lifelike rendering of the podcast episode.
-
- ## Workflow Diagram
  
  ```mermaid
  ```
- ## Sequence Diagram
  ```mermaid
  ```
- ## Implementation Details
	- The toolchain will be orchestrated by a Python script that interacts with the filesystem and calls the necessary APIs. The script will be modular, with each task encapsulated in its own function, and will include robust logging, configuration management, state management, unit tests, and documentation.
	- ### Main Functions (update these)
		- 1. `load_topics()`: Reads a list of topics from a file.
		  2. `search_news_items(topics)`: Uses Perplexity to search for news items related to the given topics.
		  3. `rank_news_items(items)`: Uses Mixtral 8B LLM to rank the news items, returning a list of items with a score from 1 to 10.
		  4. `process_high_score_items(items)`: Filters items with scores above 8, uses GPT-4 to restructure the items into technical essays, and isolates web links.
		  5. `scrape_details(links)`: Uses a web scraper module to fetch detailed summaries from the links.
		  6. `create_podcast_script(story, summaries)`: Uses Claude 3.5 and RAGflow corpus to create a podcast script.
		  7. `split_script(script)`: Splits the script between two interlocutors: Bob and Sue.
		  8. `text_to_voice(lines, person)`: Uses text-to-voice engines to convert lines into audio for Bob and Sue.
		  9. `sync_with_metahuman(bob_audio, sue_audio)`: Syncs the audio with Metahuman talking heads over a network connection to Unreal Engine.
- ## Next Steps
  
  1. Implement the Python script with the outlined functions and best practices.
  2. Set up the necessary APIs and modules (FastAPI, OpenWebUI, Perplexity, Mixtral 8B LLM, GPT-4, Claude 3.5, RAGflow, web scraper, text-to-voice engines, Metahuman, Unreal Engine).
  3. Test and refine the toolchain, ensuring smooth integration and reliable performance.
  4. Document the setup, usage, and maintenance of the toolchain for future reference and collaboration.
  
  By following this plan, we can develop a robust and efficient toolchain for automating the creation of daily news podcasts, delivering engaging and informative content to our audience.
-

### ASSISTANT
Thank you for sharing the details about the setup and workflows. I have a few clarifying questions to better understand the context and requirements:

1. **Logseq Execution**: You mentioned this notebook-like environment executes Python code directly and interacts with Logseq markdown. How is the execution triggered in the markdown? Are there specific tags, buttons, or commands that initiate the code execution?

2. **API Integration**: The scripts involve requests to various APIs (e.g., OpenWebUI, Perplexity, GPT-4). How are the API credentials securely managed and stored within this environment? Are there any predefined security protocols or environment variables in place?

3. **Model Selection**: For selecting agent models, how does the user input the selected model names back into the Logseq environment? Is it a manual pasting process, or can it be automated to reduce user intervention?

4. **User Interaction**: When the user elects topics or marks radio-button active public pages, how is this interaction captured and stored? Is there a specific UI element in Logseq that handles such selections?

5. **Random Topic Selection**: In the section for randomly selecting topics, how do we ensure the randomness and uniqueness of the selected topics without repeating the same ones in successive executions?

6. **Error Handling**: What mechanisms are in place for error handling and notifications within this framework? For instance, if a call to an API fails, will there be logging or an alert system to notify the user?

7. **Python Environment**: For the inline Python code block that creates a WAV file, how is the Python environment managed within Logseq? Is there an interpreter embedded, or does it rely on an external execution environment?

8. **Module Dependencies**: Could you provide a list of required Python modules and versions used in this setup? This includes modules for API interaction, web scraping, TTS, and integration with Unreal Engine.

9. **Mermaid Diagrams**: The placeholders for mermaid diagrams (workflow and sequence) are noted. Are you planning to provide these details later, and should they reflect the entire flow from news parsing to podcast generation?

10. **Testing and CI/CD**: How is testing managed within this environment? Is there any continuous integration and deployment (CI/CD) setup to ensure code quality and smooth updates?

Understanding these aspects will help in ensuring that the development and deployment of such a sophisticated toolchain are seamless and efficient.

### USER
Logseq Execution: There is an execute button below the code. The python interpreter is loaded into the electron environment and displays results below, but they are not written back peristently.

API Integration: It's a single access key as shown in this markdown block. As it's only local networking this is fine. Web credentials are handled by open web ui and are stored securely on that server

Model Selection: for now it's copy/paste as you guessed

User Interaction: forget the radio buttons that was an old idea, we'll just be actioning between script blocks using manual text editing for now

Random Topic Selection: for this mvp we can tolerate pseudo random and repeats.

Error Handling: as in the script shown the python can print back under the code, and this should form the basis of all feedback that is not explicitly persistent. 
Python Environment: lets use a placeholder for the wav stuff, it's likely going to just make ffmpeg calls, but let's not worry yet.

Module Dependencies: ALL of the complex interactions are handled by the openwebui server, we're just sending it instructions from the knowledge graph itself.

Mermaid Diagrams: you should make the mermaid diagrams now, based on this conversation.

Testing will be MVP and inline by me at this stage.

how about you rewrite the whole page here, but update for clarity in a way that would have resolved your questions. Create a code block in the style of the topic loader, using the ip address of the API, the bearer key, and the suggestions in the curl command. Let's see if it runs. Also update the mermaid diagrams. I am aiming for a full page I can copy back over to logseq and attempt to execute. you're great at this! Note that 	- {{evalparent}} is how logseq knows to substitute a execute code button.

here is the swagger json documentation that will allow you to write code to speak to the openwebui API via the ip and token provided.

{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
        "/auths/": {
            "get": {
                "tags": [
                    "auths"
                ],
                "summary": "Get Session User",
                "operationId": "get_session_user_auths__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apps__webui__models__auths__UserResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/auths/update/profile": {
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Update Profile",
                "operationId": "update_profile_auths_update_profile_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProfileForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apps__webui__models__auths__UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/auths/update/password": {
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Update Password",
                "operationId": "update_password_auths_update_password_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePasswordForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Update Password Auths Update Password Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/auths/signin": {
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Signin",
                "operationId": "signin_auths_signin_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SigninForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigninResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auths/signup": {
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Signup",
                "operationId": "signup_auths_signup_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignupForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigninResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auths/add": {
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Add User",
                "operationId": "add_user_auths_add_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddUserForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigninResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/auths/admin/details": {
            "get": {
                "tags": [
                    "auths"
                ],
                "summary": "Get Admin Details",
                "operationId": "get_admin_details_auths_admin_details_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/auths/admin/config": {
            "get": {
                "tags": [
                    "auths"
                ],
                "summary": "Get Admin Config",
                "operationId": "get_admin_config_auths_admin_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Update Admin Config",
                "operationId": "update_admin_config_auths_admin_config_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/auths/api_key": {
            "get": {
                "tags": [
                    "auths"
                ],
                "summary": "Get Api Key",
                "operationId": "get_api_key_auths_api_key_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKey"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "auths"
                ],
                "summary": "Create Api Key ",
                "operationId": "create_api_key__auths_api_key_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKey"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "auths"
                ],
                "summary": "Delete Api Key",
                "operationId": "delete_api_key_auths_api_key_delete",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Api Key Auths Api Key Delete"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get Users",
                "operationId": "get_users_users__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserModel"
                                    },
                                    "title": "Response Get Users Users  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/permissions/user": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get User Permissions",
                "operationId": "get_user_permissions_users_permissions_user_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Update User Permissions",
                "operationId": "update_user_permissions_users_permissions_user_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Form Data"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/update/role": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Update User Role",
                "operationId": "update_user_role_users_update_role_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRoleUpdateForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/UserModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update User Role Users Update Role Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/user/settings": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get User Settings By Session User",
                "operationId": "get_user_settings_by_session_user_users_user_settings_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/UserSettings"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get User Settings By Session User Users User Settings Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/user/settings/update": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Update User Settings By Session User",
                "operationId": "update_user_settings_by_session_user_users_user_settings_update_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSettings"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/user/info": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get User Info By Session User",
                "operationId": "get_user_info_by_session_user_users_user_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get User Info By Session User Users User Info Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/user/info/update": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Update User Settings By Session User",
                "operationId": "update_user_settings_by_session_user_users_user_info_update_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Form Data"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update User Settings By Session User Users User Info Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get User By Id",
                "operationId": "get_user_by_id_users__user_id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apps__webui__routers__users__UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete User By Id",
                "operationId": "delete_user_by_id_users__user_id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete User By Id Users  User Id  Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}/update": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Update User By Id",
                "operationId": "update_user_by_id_users__user_id__update_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/UserModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update User By Id Users  User Id  Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/list": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get Session User Chat List",
                "operationId": "get_session_user_chat_list_chats_list_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChatTitleIdResponse"
                                    },
                                    "title": "Response Get Session User Chat List Chats List Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get Session User Chat List",
                "operationId": "get_session_user_chat_list_chats__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChatTitleIdResponse"
                                    },
                                    "title": "Response Get Session User Chat List Chats  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "chats"
                ],
                "summary": "Delete All User Chats",
                "operationId": "delete_all_user_chats_chats__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete All User Chats Chats  Delete"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/list/user/{user_id}": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get User Chat List By User Id",
                "operationId": "get_user_chat_list_by_user_id_chats_list_user__user_id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChatTitleIdResponse"
                                    },
                                    "title": "Response Get User Chat List By User Id Chats List User  User Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/new": {
            "post": {
                "tags": [
                    "chats"
                ],
                "summary": "Create New Chat",
                "operationId": "create_new_chat_chats_new_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/apps__webui__models__chats__ChatForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Create New Chat Chats New Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/all": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get User Chats",
                "operationId": "get_user_chats_chats_all_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChatResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Get User Chats Chats All Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/all/archived": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get User Chats",
                "operationId": "get_user_chats_chats_all_archived_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChatResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Get User Chats Chats All Archived Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/all/db": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get All User Chats In Db",
                "operationId": "get_all_user_chats_in_db_chats_all_db_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChatResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Get All User Chats In Db Chats All Db Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/archived": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get Archived Session User Chat List",
                "operationId": "get_archived_session_user_chat_list_chats_archived_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChatTitleIdResponse"
                                    },
                                    "title": "Response Get Archived Session User Chat List Chats Archived Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/archive/all": {
            "post": {
                "tags": [
                    "chats"
                ],
                "summary": "Archive All Chats",
                "operationId": "archive_all_chats_chats_archive_all_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Archive All Chats Chats Archive All Post"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/share/{share_id}": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get Shared Chat By Id",
                "operationId": "get_shared_chat_by_id_chats_share__share_id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "share_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Share Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Shared Chat By Id Chats Share  Share Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/tags": {
            "post": {
                "tags": [
                    "chats"
                ],
                "summary": "Get User Chat List By Tag Name",
                "operationId": "get_user_chat_list_by_tag_name_chats_tags_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagNameForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChatTitleIdResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Get User Chat List By Tag Name Chats Tags Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/tags/all": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get All Tags",
                "operationId": "get_all_tags_chats_tags_all_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TagModel"
                                    },
                                    "type": "array",
                                    "title": "Response Get All Tags Chats Tags All Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/chats/{id}": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get Chat By Id",
                "operationId": "get_chat_by_id_chats__id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Chat By Id Chats  Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "chats"
                ],
                "summary": "Update Chat By Id",
                "operationId": "update_chat_by_id_chats__id__post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/apps__webui__models__chats__ChatForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update Chat By Id Chats  Id  Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "chats"
                ],
                "summary": "Delete Chat By Id",
                "operationId": "delete_chat_by_id_chats__id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Chat By Id Chats  Id  Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/{id}/clone": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Clone Chat By Id",
                "operationId": "clone_chat_by_id_chats__id__clone_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Clone Chat By Id Chats  Id  Clone Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/{id}/archive": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Archive Chat By Id",
                "operationId": "archive_chat_by_id_chats__id__archive_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Archive Chat By Id Chats  Id  Archive Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/{id}/share": {
            "post": {
                "tags": [
                    "chats"
                ],
                "summary": "Share Chat By Id",
                "operationId": "share_chat_by_id_chats__id__share_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Share Chat By Id Chats  Id  Share Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "chats"
                ],
                "summary": "Delete Shared Chat By Id",
                "operationId": "delete_shared_chat_by_id_chats__id__share_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Delete Shared Chat By Id Chats  Id  Share Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/{id}/tags": {
            "get": {
                "tags": [
                    "chats"
                ],
                "summary": "Get Chat Tags By Id",
                "operationId": "get_chat_tags_by_id_chats__id__tags_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TagModel"
                                    },
                                    "title": "Response Get Chat Tags By Id Chats  Id  Tags Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "chats"
                ],
                "summary": "Add Chat Tag By Id",
                "operationId": "add_chat_tag_by_id_chats__id__tags_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatIdTagForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChatIdTagModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Add Chat Tag By Id Chats  Id  Tags Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "chats"
                ],
                "summary": "Delete Chat Tag By Id",
                "operationId": "delete_chat_tag_by_id_chats__id__tags_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatIdTagForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Delete Chat Tag By Id Chats  Id  Tags Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/{id}/tags/all": {
            "delete": {
                "tags": [
                    "chats"
                ],
                "summary": "Delete All Chat Tags By Id",
                "operationId": "delete_all_chat_tags_by_id_chats__id__tags_all_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Delete All Chat Tags By Id Chats  Id  Tags All Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/documents/": {
            "get": {
                "tags": [
                    "documents"
                ],
                "summary": "Get Documents",
                "operationId": "get_documents_documents__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Get Documents Documents  Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/documents/create": {
            "post": {
                "tags": [
                    "documents"
                ],
                "summary": "Create New Doc",
                "operationId": "create_new_doc_documents_create_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/DocumentResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Create New Doc Documents Create Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/documents/doc": {
            "get": {
                "tags": [
                    "documents"
                ],
                "summary": "Get Doc By Name",
                "operationId": "get_doc_by_name_documents_doc_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/DocumentResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Doc By Name Documents Doc Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/documents/doc/tags": {
            "post": {
                "tags": [
                    "documents"
                ],
                "summary": "Tag Doc By Name",
                "operationId": "tag_doc_by_name_documents_doc_tags_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TagDocumentForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/DocumentResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Tag Doc By Name Documents Doc Tags Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/documents/doc/update": {
            "post": {
                "tags": [
                    "documents"
                ],
                "summary": "Update Doc By Name",
                "operationId": "update_doc_by_name_documents_doc_update_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentUpdateForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/DocumentResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update Doc By Name Documents Doc Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/documents/doc/delete": {
            "delete": {
                "tags": [
                    "documents"
                ],
                "summary": "Delete Doc By Name",
                "operationId": "delete_doc_by_name_documents_doc_delete_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Doc By Name Documents Doc Delete Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tools/": {
            "get": {
                "tags": [
                    "tools"
                ],
                "summary": "Get Toolkits",
                "operationId": "get_toolkits_tools__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ToolResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Get Toolkits Tools  Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/tools/export": {
            "get": {
                "tags": [
                    "tools"
                ],
                "summary": "Get Toolkits",
                "operationId": "get_toolkits_tools_export_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ToolModel"
                                    },
                                    "type": "array",
                                    "title": "Response Get Toolkits Tools Export Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/tools/create": {
            "post": {
                "tags": [
                    "tools"
                ],
                "summary": "Create New Toolkit",
                "operationId": "create_new_toolkit_tools_create_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ToolForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ToolResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Create New Toolkit Tools Create Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/tools/id/{id}": {
            "get": {
                "tags": [
                    "tools"
                ],
                "summary": "Get Toolkit By Id",
                "operationId": "get_toolkit_by_id_tools_id__id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ToolModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Toolkit By Id Tools Id  Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tools/id/{id}/update": {
            "post": {
                "tags": [
                    "tools"
                ],
                "summary": "Update Toolkit By Id",
                "operationId": "update_toolkit_by_id_tools_id__id__update_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ToolForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ToolModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update Toolkit By Id Tools Id  Id  Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tools/id/{id}/delete": {
            "delete": {
                "tags": [
                    "tools"
                ],
                "summary": "Delete Toolkit By Id",
                "operationId": "delete_toolkit_by_id_tools_id__id__delete_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Toolkit By Id Tools Id  Id  Delete Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/models/": {
            "get": {
                "tags": [
                    "models"
                ],
                "summary": "Get Model By Id",
                "operationId": "get_model_by_id_models__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ModelModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Model By Id Models  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/models/add": {
            "post": {
                "tags": [
                    "models"
                ],
                "summary": "Add New Model",
                "operationId": "add_new_model_models_add_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModelForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ModelModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Add New Model Models Add Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/models/update": {
            "post": {
                "tags": [
                    "models"
                ],
                "summary": "Update Model By Id",
                "operationId": "update_model_by_id_models_update_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModelForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ModelModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update Model By Id Models Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/models/delete": {
            "delete": {
                "tags": [
                    "models"
                ],
                "summary": "Delete Model By Id",
                "operationId": "delete_model_by_id_models_delete_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Model By Id Models Delete Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prompts/": {
            "get": {
                "tags": [
                    "prompts"
                ],
                "summary": "Get Prompts",
                "operationId": "get_prompts_prompts__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PromptModel"
                                    },
                                    "type": "array",
                                    "title": "Response Get Prompts Prompts  Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/prompts/create": {
            "post": {
                "tags": [
                    "prompts"
                ],
                "summary": "Create New Prompt",
                "operationId": "create_new_prompt_prompts_create_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PromptForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/PromptModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Create New Prompt Prompts Create Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/prompts/command/{command}": {
            "get": {
                "tags": [
                    "prompts"
                ],
                "summary": "Get Prompt By Command",
                "operationId": "get_prompt_by_command_prompts_command__command__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "command",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Command"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/PromptModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Prompt By Command Prompts Command  Command  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prompts/command/{command}/update": {
            "post": {
                "tags": [
                    "prompts"
                ],
                "summary": "Update Prompt By Command",
                "operationId": "update_prompt_by_command_prompts_command__command__update_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "command",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Command"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PromptForm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/PromptModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update Prompt By Command Prompts Command  Command  Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prompts/command/{command}/delete": {
            "delete": {
                "tags": [
                    "prompts"
                ],
                "summary": "Delete Prompt By Command",
                "operationId": "delete_prompt_by_command_prompts_command__command__delete_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "command",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Command"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Prompt By Command Prompts Command  Command  Delete Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memories/ef": {
            "get": {
                "tags": [
                    "memories"
                ],
                "summary": "Get Embeddings",
                "operationId": "get_embeddings_memories_ef_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/memories/": {
            "get": {
                "tags": [
                    "memories"
                ],
                "summary": "Get Memories",
                "operationId": "get_memories_memories__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MemoryModel"
                                    },
                                    "type": "array",
                                    "title": "Response Get Memories Memories  Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/memories/add": {
            "post": {
                "tags": [
                    "memories"
                ],
                "summary": "Add Memory",
                "operationId": "add_memory_memories_add_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddMemoryForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/MemoryModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Add Memory Memories Add Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/memories/{memory_id}/update": {
            "post": {
                "tags": [
                    "memories"
                ],
                "summary": "Update Memory By Id",
                "operationId": "update_memory_by_id_memories__memory_id__update_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "memory_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Memory Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MemoryUpdateModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/MemoryModel"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Update Memory By Id Memories  Memory Id  Update Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memories/query": {
            "post": {
                "tags": [
                    "memories"
                ],
                "summary": "Query Memory",
                "operationId": "query_memory_memories_query_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryMemoryForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/memories/reset": {
            "get": {
                "tags": [
                    "memories"
                ],
                "summary": "Reset Memory From Vector Db",
                "operationId": "reset_memory_from_vector_db_memories_reset_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Reset Memory From Vector Db Memories Reset Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/memories/user": {
            "delete": {
                "tags": [
                    "memories"
                ],
                "summary": "Delete Memory By User Id",
                "operationId": "delete_memory_by_user_id_memories_user_delete",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Memory By User Id Memories User Delete"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/memories/{memory_id}": {
            "delete": {
                "tags": [
                    "memories"
                ],
                "summary": "Delete Memory By Id",
                "operationId": "delete_memory_by_id_memories__memory_id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "memory_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Memory Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "title": "Response Delete Memory By Id Memories  Memory Id  Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/configs/default/models": {
            "post": {
                "tags": [
                    "configs"
                ],
                "summary": "Set Global Default Models",
                "operationId": "set_global_default_models_configs_default_models_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetDefaultModelsForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Set Global Default Models Configs Default Models Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/configs/default/suggestions": {
            "post": {
                "tags": [
                    "configs"
                ],
                "summary": "Set Global Default Suggestions",
                "operationId": "set_global_default_suggestions_configs_default_suggestions_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetDefaultSuggestionsForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PromptSuggestion"
                                    },
                                    "type": "array",
                                    "title": "Response Set Global Default Suggestions Configs Default Suggestions Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/configs/banners": {
            "get": {
                "tags": [
                    "configs"
                ],
                "summary": "Get Banners",
                "operationId": "get_banners_configs_banners_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BannerModel"
                                    },
                                    "type": "array",
                                    "title": "Response Get Banners Configs Banners Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "configs"
                ],
                "summary": "Set Banners",
                "operationId": "set_banners_configs_banners_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetBannersForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BannerModel"
                                    },
                                    "type": "array",
                                    "title": "Response Set Banners Configs Banners Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/utils/gravatar": {
            "get": {
                "tags": [
                    "utils"
                ],
                "summary": "Get Gravatar",
                "operationId": "get_gravatar_utils_gravatar_get",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Email"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/utils/code/format": {
            "post": {
                "tags": [
                    "utils"
                ],
                "summary": "Format Code",
                "operationId": "format_code_utils_code_format_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeFormatRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/utils/markdown": {
            "post": {
                "tags": [
                    "utils"
                ],
                "summary": "Get Html From Markdown",
                "operationId": "get_html_from_markdown_utils_markdown_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MarkdownForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/utils/pdf": {
            "post": {
                "tags": [
                    "utils"
                ],
                "summary": "Download Chat As Pdf",
                "operationId": "download_chat_as_pdf_utils_pdf_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/apps__webui__routers__utils__ChatForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/utils/db/download": {
            "get": {
                "tags": [
                    "utils"
                ],
                "summary": "Download Db",
                "operationId": "download_db_utils_db_download_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/utils/litellm/config": {
            "get": {
                "tags": [
                    "utils"
                ],
                "summary": "Download Litellm Config Yaml",
                "operationId": "download_litellm_config_yaml_utils_litellm_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/": {
            "get": {
                "summary": "Get Status",
                "operationId": "get_status__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddMemoryForm": {
                "properties": {
                    "content": {
                        "type": "string",
                        "title": "Content"
                    }
                },
                "type": "object",
                "required": [
                    "content"
                ],
                "title": "AddMemoryForm"
            },
            "AddUserForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "profile_image_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Image Url",
                        "default": "/user.png"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Role",
                        "default": "pending"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "title": "AddUserForm"
            },
            "AdminConfig": {
                "properties": {
                    "SHOW_ADMIN_DETAILS": {
                        "type": "boolean",
                        "title": "Show Admin Details"
                    },
                    "ENABLE_SIGNUP": {
                        "type": "boolean",
                        "title": "Enable Signup"
                    },
                    "DEFAULT_USER_ROLE": {
                        "type": "string",
                        "title": "Default User Role"
                    },
                    "JWT_EXPIRES_IN": {
                        "type": "string",
                        "title": "Jwt Expires In"
                    },
                    "ENABLE_COMMUNITY_SHARING": {
                        "type": "boolean",
                        "title": "Enable Community Sharing"
                    }
                },
                "type": "object",
                "required": [
                    "SHOW_ADMIN_DETAILS",
                    "ENABLE_SIGNUP",
                    "DEFAULT_USER_ROLE",
                    "JWT_EXPIRES_IN",
                    "ENABLE_COMMUNITY_SHARING"
                ],
                "title": "AdminConfig"
            },
            "ApiKey": {
                "properties": {
                    "api_key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Api Key"
                    }
                },
                "type": "object",
                "title": "ApiKey"
            },
            "BannerModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "title": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "dismissible": {
                        "type": "boolean",
                        "title": "Dismissible"
                    },
                    "timestamp": {
                        "type": "integer",
                        "title": "Timestamp"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "type",
                    "content",
                    "dismissible",
                    "timestamp"
                ],
                "title": "BannerModel"
            },
            "ChatIdTagForm": {
                "properties": {
                    "tag_name": {
                        "type": "string",
                        "title": "Tag Name"
                    },
                    "chat_id": {
                        "type": "string",
                        "title": "Chat Id"
                    }
                },
                "type": "object",
                "required": [
                    "tag_name",
                    "chat_id"
                ],
                "title": "ChatIdTagForm"
            },
            "ChatIdTagModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "tag_name": {
                        "type": "string",
                        "title": "Tag Name"
                    },
                    "chat_id": {
                        "type": "string",
                        "title": "Chat Id"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "timestamp": {
                        "type": "integer",
                        "title": "Timestamp"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "tag_name",
                    "chat_id",
                    "user_id",
                    "timestamp"
                ],
                "title": "ChatIdTagModel"
            },
            "ChatResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "chat": {
                        "type": "object",
                        "title": "Chat"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    },
                    "share_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Share Id"
                    },
                    "archived": {
                        "type": "boolean",
                        "title": "Archived"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_id",
                    "title",
                    "chat",
                    "updated_at",
                    "created_at",
                    "archived"
                ],
                "title": "ChatResponse"
            },
            "ChatTitleIdResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "title",
                    "updated_at",
                    "created_at"
                ],
                "title": "ChatTitleIdResponse"
            },
            "CodeFormatRequest": {
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Code"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ],
                "title": "CodeFormatRequest"
            },
            "DocumentForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "collection_name": {
                        "type": "string",
                        "title": "Collection Name"
                    },
                    "filename": {
                        "type": "string",
                        "title": "Filename"
                    },
                    "content": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "title",
                    "collection_name",
                    "filename"
                ],
                "title": "DocumentForm"
            },
            "DocumentResponse": {
                "properties": {
                    "collection_name": {
                        "type": "string",
                        "title": "Collection Name"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "filename": {
                        "type": "string",
                        "title": "Filename"
                    },
                    "content": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "timestamp": {
                        "type": "integer",
                        "title": "Timestamp"
                    }
                },
                "type": "object",
                "required": [
                    "collection_name",
                    "name",
                    "title",
                    "filename",
                    "user_id",
                    "timestamp"
                ],
                "title": "DocumentResponse"
            },
            "DocumentUpdateForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "title"
                ],
                "title": "DocumentUpdateForm"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "MarkdownForm": {
                "properties": {
                    "md": {
                        "type": "string",
                        "title": "Md"
                    }
                },
                "type": "object",
                "required": [
                    "md"
                ],
                "title": "MarkdownForm"
            },
            "MemoryModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_id",
                    "content",
                    "updated_at",
                    "created_at"
                ],
                "title": "MemoryModel"
            },
            "MemoryUpdateModel": {
                "properties": {
                    "content": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content"
                    }
                },
                "type": "object",
                "title": "MemoryUpdateModel"
            },
            "ModelForm": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "base_model_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Model Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ModelMeta"
                    },
                    "params": {
                        "$ref": "#/components/schemas/ModelParams"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "meta",
                    "params"
                ],
                "title": "ModelForm"
            },
            "ModelMeta": {
                "properties": {
                    "profile_image_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Image Url",
                        "default": "/favicon.png"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "capabilities": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Capabilities"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "ModelMeta"
            },
            "ModelModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "base_model_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Model Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "params": {
                        "$ref": "#/components/schemas/ModelParams"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ModelMeta"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_id",
                    "name",
                    "params",
                    "meta",
                    "updated_at",
                    "created_at"
                ],
                "title": "ModelModel"
            },
            "ModelParams": {
                "properties": {},
                "additionalProperties": true,
                "type": "object",
                "title": "ModelParams"
            },
            "ModelResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ModelMeta"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "meta",
                    "updated_at",
                    "created_at"
                ],
                "title": "ModelResponse"
            },
            "PromptForm": {
                "properties": {
                    "command": {
                        "type": "string",
                        "title": "Command"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    }
                },
                "type": "object",
                "required": [
                    "command",
                    "title",
                    "content"
                ],
                "title": "PromptForm"
            },
            "PromptModel": {
                "properties": {
                    "command": {
                        "type": "string",
                        "title": "Command"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "timestamp": {
                        "type": "integer",
                        "title": "Timestamp"
                    }
                },
                "type": "object",
                "required": [
                    "command",
                    "user_id",
                    "title",
                    "content",
                    "timestamp"
                ],
                "title": "PromptModel"
            },
            "PromptSuggestion": {
                "properties": {
                    "title": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Title"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "content"
                ],
                "title": "PromptSuggestion"
            },
            "QueryMemoryForm": {
                "properties": {
                    "content": {
                        "type": "string",
                        "title": "Content"
                    }
                },
                "type": "object",
                "required": [
                    "content"
                ],
                "title": "QueryMemoryForm"
            },
            "SetBannersForm": {
                "properties": {
                    "banners": {
                        "items": {
                            "$ref": "#/components/schemas/BannerModel"
                        },
                        "type": "array",
                        "title": "Banners"
                    }
                },
                "type": "object",
                "required": [
                    "banners"
                ],
                "title": "SetBannersForm"
            },
            "SetDefaultModelsForm": {
                "properties": {
                    "models": {
                        "type": "string",
                        "title": "Models"
                    }
                },
                "type": "object",
                "required": [
                    "models"
                ],
                "title": "SetDefaultModelsForm"
            },
            "SetDefaultSuggestionsForm": {
                "properties": {
                    "suggestions": {
                        "items": {
                            "$ref": "#/components/schemas/PromptSuggestion"
                        },
                        "type": "array",
                        "title": "Suggestions"
                    }
                },
                "type": "object",
                "required": [
                    "suggestions"
                ],
                "title": "SetDefaultSuggestionsForm"
            },
            "SigninForm": {
                "properties": {
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "password"
                ],
                "title": "SigninForm"
            },
            "SigninResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role"
                    },
                    "profile_image_url": {
                        "type": "string",
                        "title": "Profile Image Url"
                    },
                    "token": {
                        "type": "string",
                        "title": "Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "email",
                    "name",
                    "role",
                    "profile_image_url",
                    "token",
                    "token_type"
                ],
                "title": "SigninResponse"
            },
            "SignupForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "profile_image_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Image Url",
                        "default": "/user.png"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "title": "SignupForm"
            },
            "TagDocumentForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "tags": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Tags"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tags"
                ],
                "title": "TagDocumentForm"
            },
            "TagModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "data": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "user_id"
                ],
                "title": "TagModel"
            },
            "TagNameForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "skip": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Skip",
                        "default": 0
                    },
                    "limit": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Limit",
                        "default": 50
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "TagNameForm"
            },
            "ToolForm": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ToolMeta"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "content",
                    "meta"
                ],
                "title": "ToolForm"
            },
            "ToolMeta": {
                "properties": {
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    }
                },
                "type": "object",
                "title": "ToolMeta"
            },
            "ToolModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "specs": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Specs"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ToolMeta"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_id",
                    "name",
                    "content",
                    "specs",
                    "meta",
                    "updated_at",
                    "created_at"
                ],
                "title": "ToolModel"
            },
            "ToolResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ToolMeta"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_id",
                    "name",
                    "meta",
                    "updated_at",
                    "created_at"
                ],
                "title": "ToolResponse"
            },
            "UpdatePasswordForm": {
                "properties": {
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "new_password": {
                        "type": "string",
                        "title": "New Password"
                    }
                },
                "type": "object",
                "required": [
                    "password",
                    "new_password"
                ],
                "title": "UpdatePasswordForm"
            },
            "UpdateProfileForm": {
                "properties": {
                    "profile_image_url": {
                        "type": "string",
                        "title": "Profile Image Url"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "profile_image_url",
                    "name"
                ],
                "title": "UpdateProfileForm"
            },
            "UserModel": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role",
                        "default": "pending"
                    },
                    "profile_image_url": {
                        "type": "string",
                        "title": "Profile Image Url"
                    },
                    "last_active_at": {
                        "type": "integer",
                        "title": "Last Active At"
                    },
                    "updated_at": {
                        "type": "integer",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "integer",
                        "title": "Created At"
                    },
                    "api_key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Api Key"
                    },
                    "settings": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/UserSettings"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "info": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Info"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "email",
                    "profile_image_url",
                    "last_active_at",
                    "updated_at",
                    "created_at"
                ],
                "title": "UserModel"
            },
            "UserRoleUpdateForm": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "role"
                ],
                "title": "UserRoleUpdateForm"
            },
            "UserSettings": {
                "properties": {
                    "ui": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ui",
                        "default": {}
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "UserSettings"
            },
            "UserUpdateForm": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "profile_image_url": {
                        "type": "string",
                        "title": "Profile Image Url"
                    },
                    "password": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "email",
                    "profile_image_url"
                ],
                "title": "UserUpdateForm"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "apps__webui__models__auths__UserResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role"
                    },
                    "profile_image_url": {
                        "type": "string",
                        "title": "Profile Image Url"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "email",
                    "name",
                    "role",
                    "profile_image_url"
                ],
                "title": "UserResponse"
            },
            "apps__webui__models__chats__ChatForm": {
                "properties": {
                    "chat": {
                        "type": "object",
                        "title": "Chat"
                    }
                },
                "type": "object",
                "required": [
                    "chat"
                ],
                "title": "ChatForm"
            },
            "apps__webui__routers__users__UserResponse": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "profile_image_url": {
                        "type": "string",
                        "title": "Profile Image Url"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "profile_image_url"
                ],
                "title": "UserResponse"
            },
            "apps__webui__routers__utils__ChatForm": {
                "properties": {
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "messages": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Messages"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "messages"
                ],
                "title": "ChatForm"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
} 




### ASSISTANT
Certainly! Let's rewrite the entire page to make it clearer and more aligned with your directions. We'll also include the Python code block to query the model list from the OpenWebUI API. I'll follow the format you've described and incorporate the new information.

---

public:: true

- # LogCaster
  - A podcast creation engine underpinned by a logseq knowledge graph and multi-agent framework.
- # Automated Daily News Podcast Generation
  - This project aims to develop a sophisticated toolchain using FastAPI and OpenWebUI to automate the creation of a daily news podcast. The goal is to seamlessly integrate various modules and pipelines to process breaking news items, focusing on selecting interesting and unusual combinations of topics. The system will generate structured content through a multi-agent approach, mediated by a single API interface, ultimately producing a compelling podcast featuring two interlocutors, Bob and Sue.
  
- ## Workflow Overview
  
  - **Parse Logseq**: A Logseq executed Python block parses the current Logseq markdown page to find the IP address of the OpenWebUI server specified here:
    - ```text
      192.168.0.51
      ```
      
  - **Request the Model List**: Use the OpenWebUI API to request the model list from the IP address specified above and the access token provided below:
    - ```text
      Authorization: Bearer sk-6f3f39171ba247b4a66093287305fabc
      ```
  
  - Python code to replace the curl command:
    - ```python
      import requests
      import json

      # Set up the request headers and URL
      headers = {
          "accept": "application/json",
          "Authorization": "Bearer sk-6f3f39171ba247b4a66093287305fabc"
      }
      url = "http://192.168.0.51:3000/api/v1/models/?id="

      # Make the GET request
      response = requests.get(url, headers=headers)

      # Parse the response
      if response.status_code == 200:
          models = response.json()
          model_names = [model['name'] for model in models]
           # Print the model names (we assume logseq will show them)
          print("\n".join(model_names)) 
      else:
          print("Failed to fetch models:", response.status_code, response.text)
    ```
    - {{evalparent}}
  
  - **List is returned**: and should be written directly into this Logseq page in the block labelled below the code:
    - ## Model List
      - ```text
        Models returned from the OpenWebUI API should be listed here, one model name per line.
        ```
        
  - **Select Agent Models**: The user can copy and paste model names into the agent slots here.
    - ## Nominated Agents
      - Web Search
        - ```text
          Perplexity
          ```
      - Rating the news
        - ```text
          Mistral 8B
          ```
        
  - **Loading Topics**: Search the Logseq knowledge graph for pages tagged as public and list any pages above 100kb in size.
    - ```python
      import js
      
      def list_public_pages():
          try:
              pages = js.logseq.api.get_all_pages()
              public_pages = []
              for page in pages:
                  page_name = page.originalName
                  # Get the first block of the page, typically containing metadata
                  content = js.logseq.api.get_page_blocks_tree(page_name)
                  if content and "public:: true" in content[0].content:
                      public_pages.append(page_name)
              return public_pages
          except Exception as e:
              js.logseq.api.show_msg(f"Error in list_public_pages: {e}", {'timeout': 5000})
              return []
      
      def main():
          public_pages = list_public_pages()
          if public_pages:
              result = ", ".join(public_pages)
          else:
              result = "No public pages found."
          return result
      
      # Execute the main function
      main()
    ```
    - {{evalparent}}
    - ## Topics with more than 100kb
      - Topic 1
      - Topic 2
      - This list should be replaced inside this file by the code.
      
  - **User Elects Topics**: Present the public list to the user as line-separated topics. The user selects their topics of choice by deleting unimportant lines. This selection remains stored in the Logseq page.
  
  - **Randomly Select Topics**: Next, executable Logseq code selects 2 or 3 topics at random from the list of elected topics. It updates the Logseq block below:
    - ### Trying these topics
      - Topic 1
      - Topic 2
      - Topic 3
      
  - **Searching for News**: The same code block calls the Perplexity pipeline using the OpenWebUI unified API to search for breaking news items that intersect with the randomly loaded topics.
  
  - **Ranking Importance**: Evaluate the returned news items using a locally hosted Mixtral 8B LLM, called from the list of available models. Request a score on likely impact and public interest on a scale from 1 to 10.
  
  - **Branching Factor**: If the news item scores above 8, pass the Perplexity-generated content to GPT-4. Otherwise, select another 2 or 3 public-tagged topics and repeat. The process can be attempted a maximum of 10 times. If 10 attempts do not surface a news item of worth, alert the user in the Logseq output.
  
  - **Extract Web Links**: Create a simple list of raw URLs found in the Perplexity response and remove duplicates.
  
  - **Detailed Information Scraping**: Process the identified links using the web scraper module from the models list in OpenWebUI to fetch in-depth summaries and additional content from the linked pages.
  
  - **Or Progress News Item**: Use the GPT4oV model from the OpenWebUI models list to process the raw Perplexity response and all ancillary summaries gathered from the web scraper. Return a detailed and highly technical description of the news item in JSON format, with web URLs and their summaries carefully segmented and linked as a knowledge graph.
  
  - **Enhancing with RAG**: Send the text elements of the GPT4-generated JSON to the RAGflow module in the models list, requesting that the knowledge be modified to include any opinions and ideas from the RAG corpus that intersect with the news item. Save the response to a Logseq block titled # Story Plus RAG.
  
  - **Generating Podcast Script**: Use Claude 3.5 to create a podcast script based on few-shot examples from the Logseq page labelled [[example podcast dialogue]]. Send the RAGflow-enhanced news story and the JSON-structured web links and summaries. The script should alternate dialogue between Bob and Sue, incorporating brief mentions of the web sources available in the episode notes. The returned JSON from Claude 3.5 should have field identifiers for Bob and Sue.
  
  - **Splitting Script**: Divide the podcast script into parts for Bob and Sue, creating two new JSON files with sequence numbers for the conversation.
  
  - **Text to Voice Conversion**: Pass both scripts to text-to-voice engines to generate the audio for Bob and Sue's lines respectively. Insist that the audio be returned with sequence numbers.
  
  - **Inline Python Code Block Creates WAV File**: Placeholder for now.
  
  - **Synchronization with Metahuman**: Synchronize the generated audio tracks with Metahuman talking heads in Unreal Engine to create a lifelike rendering of the podcast episode.
  
- ## Workflow Diagram
  
  ```mermaid
  graph TD
    A[Parse Logseq] --> B[Request Model List]
    B --> C[Model List Returned]
    C --> D[Select Agent Models]
    D --> E[Loading Topics]
    E --> F[User Elects Topics]
    F --> G[Randomly Select Topics]
    G --> H[Searching for News]
    H --> I[Ranking Importance]
    I -->|Score > 8| K[Process with GPT-4]
    I -->|Score <= 8| J[Select New Topics]
    K --> L[Extract Web Links]
    L --> M[Detailed Information Scraping]
    M --> N[Enhance with RAGflow]
    N --> O[Generating Podcast Script]
    O --> P[Split Script]
    P --> Q[Text to Voice Conversion]
    Q --> R[Create WAV File]
    R --> S[Synchronize with Metahuman]
  ```
- ## Sequence Diagram
  ```mermaid
  sequenceDiagram
    participant User
    participant Logseq
    participant API
    participant Models
    participant Perplexity
    participant Mixtral
    participant GPT4
    participant Scraper
    participant Claude
    participant TTS
    User->>Logseq: Trigger Python Script
    Logseq->>API: Request Model List
    API->>Logseq: Return Model List
    Logseq->>User: Display Model List
    User->>Logseq: Select Agent Models
    Logseq->>User: Display Public Pages
    User->>Logseq: Elect Topics
    Logseq->>Logseq: Randomly Select Topics
    Logseq->>Perplexity: Search for News
    Perplexity->>Logseq: Return News Items
    Logseq->>Mixtral: Rank News Items
    Mixtral->>Logseq: Return Scores
    alt Score > 8
      Logseq->>GPT4: Process with GPT-4
      GPT4->>Logseq: Return Detailed Info
      Logseq->>API: Extract Web Links
      API->>Logseq: Return Links
      Logseq->>Scraper: Scrape Details
      Scraper->>Logseq: Return Summaries
      Logseq->>RAG: Enhance with RAG
      RAG->>Logseq: Return Enhanced Story
      Logseq->>Claude: Generate Podcast Script
      Claude->>Logseq: Return Podcast Script
      Logseq->>TTS: Convert Text to Voice
      TTS->>Logseq: Return Audio
      Logseq->>Unreal: Sync with Metahuman
    else Score <= 8
      Logseq->>Logseq: Select New Topics
    end
    
  ```
  
- ## Implementation Details
  - The toolchain will be orchestrated by a Python script that interacts with the filesystem and calls the necessary APIs. The script will be modular, with each task encapsulated in its own function, including robust logging, configuration management, state management, unit tests, and documentation.
  - ### Main Functions
    1. `load_topics()`: Reads a list of topics from a file.
    2. `search_news_items(topics)`: Uses Perplexity to search for news items related to the given topics.
    3. `rank_news_items(items)`: Uses Mixtral 8B LLM to rank the news items, returning a list of items with a score from 1 to 10.
    4. `process_high_score_items(items)`: Filters items with scores above 8, uses GPT-4 to restructure the items into technical essays, and isolates web links.
    5. `scrape_details(links)`: Uses a web scraper module to fetch detailed summaries from the links.
    6. `create_podcast_script(story, summaries)`: Uses Claude 3.5 and RAGflow corpus to create a podcast script.
    7. `split_script(script)`: Splits the script between two interlocutors: Bob and Sue.
    8. `text_to_voice(lines, person)`: Uses text-to-voice engines to convert lines into audio for Bob and Sue.
    9. `sync_with_metahuman(bob_audio, sue_audio)`: Syncs the audio with Metahuman talking heads over a network connection to Unreal Engine.
    
- ## Next Steps
  1. Implement the Python script with the outlined functions and best practices.
  2. Set up the necessary APIs and modules (FastAPI, OpenWebUI, Perplexity, Mixtral 8B LLM, GPT-4, Claude 3.5, RAGflow, web scraper, text-to-voice engines, Metahuman, Unreal Engine).
  3. Test and refine the toolchain, ensuring smooth integration and reliable performance.
  4. Document the setup, usage, and maintenance of the toolchain for future reference and collaboration.
  
By following this plan, we can develop a robust and efficient toolchain for automating the creation of daily news podcasts, delivering engaging and informative content to our audience.

---

Now you can copy this revised and clarified content back to Logseq and attempt to execute the code blocks. Let me know if there's anything specific you'd like to modify or add!

### USER
this code block (my original) still executes fine and returns the list.

- **Loading Topics**: Search the logseq knowledge graph for the tagged public pages. Create a list of any pages above 100kb in size. Note Python will load the first time this block is evaluated.
	- ```python
	  import js
	  
	  def list_public_pages():
	      try:
	          pages = js.logseq.api.get_all_pages()
	          public_pages = []
	          for page in pages:
	              page_name = page.originalName
	              # Get the first block of the page which typically contains metadata
	              content = js.logseq.api.get_page_blocks_tree(page_name)
	              if content and "public:: true" in content[0].content:
	                  public_pages.append(page_name)
	          return public_pages
	      except Exception as e:
	          js.logseq.api.show_msg(f"Error in list_public_pages: {e}", {'timeout': 5000})
	          return []
	  
	  def main():
	      public_pages = list_public_pages()
	      if public_pages:
	          result = ", ".join(public_pages)
	      else:
	          result = "No public pages found."
	      return result
	  
	  # Execute the main function
	  main()
	  ```
		- {{evalparent}}

but the one you reimplemented says "undefined" and does not return results.

- **Loading Topics**: Search the Logseq knowledge graph for pages tagged as public and list any pages above 100kb in size.
	-
	  ```python
	  import js
	  
	  def list_public_pages():
	      try:
	          pages = js.logseq.api.get_all_pages()
	          public_pages = []
	          for page in pages:
	              page_name = page.originalName
	              # Get the first block of the page, typically containing metadata
	              content = js.logseq.api.get_page_blocks_tree(page_name)
	              if content and "public:: true" in content[0].content:
	                  public_pages.append(page_name)
	          return public_pages
	      except Exception as e:
	          js.logseq.api.show_msg(f"Error in list_public_pages: {e}", {'timeout': 5000})
	          return []
	  
	  def main():
	      public_pages = list_public_pages()
	      if public_pages:
	          result = ", ".join(public_pages)
	      else:
	          result = "No public pages found."
	      return result
	  
	  # Execute the main function
	  main()
	  ```
	- {{evalparent}}
	- ## Topics with more than 100kb
		- Topic 1
		- Topic 2
		- This list should be replaced inside this file by the code.

what might have gone wrong?

### ASSISTANT
Given that the original code works fine and returns results, while the re-implemented code results in "undefined", it seems that the issue might be related to either the code execution environment or some subtle difference that was introduced in the translation. Let's go through a few potential issues and fixes:

1. **Indentation and Formatting**: Ensure the code block is properly formatted and indented.

2. **Return Handling**: Verify that the code's return values are managed correctly within the Logseq environment.

3. **Output**: Cross-check if the outputting method used in Logseq is consistent and functioning correctly.

Here is a revised version, ensuring consistency with the original code that works for you:

---

- **Loading Topics**: Search the Logseq knowledge graph for pages tagged as public and list any pages above 100kb in size.
	```python
	import js

	def list_public_pages():
		try:
			pages = js.logseq.api.get_all_pages()
			public_pages = []
			for page in pages:
				page_name = page.originalName
				# Get the first block of the page, typically containing metadata
				content = js.logseq.api.get_page_blocks_tree(page_name)
				if content and "public:: true" in content[0].content:
					public_pages.append(page_name)
			return public_pages
		except Exception as e:
			js.logseq.api.show_msg(f"Error in list_public_pages: {e}", {'timeout': 5000})
			return []

	def main():
		public_pages = list_public_pages()
		if public_pages:
			result = "\n".join(public_pages)
		else:
			result = "No public pages found."
		print(result)  # Ensuring the result is printed for logseq to capture
		return result

	# Execute the main function
	main()
	```
	- {{evalparent}}
	- ## Topics with more than 100kb
		- Topic 1
		- Topic 2
		- This list should be replaced inside this file by the code.

---

In this revised version, I have ensured the code explicitly prints the result, which is often required to capture and display the output accurately in some interpreted script environments.

Please copy and try this version in your Logseq environment and let me know if it resolves the issue.

### USER
so the problem was simply an addiitonal indent was required before eval parent, as it must be a child of the python block. I have corrected it.  

### ASSISTANT
I'm glad you were able to identify and correct the indentation issue! Indentation is critical, especially in markdown environments like Logseq where it determines the structure and parent-child relationships of blocks.

For consistency and completeness, here's the final version of the entire page with the corrected indentations and all the necessary details we discussed:

---

public:: true

- # LogCaster
  - A podcast creation engine underpinned by a logseq knowledge graph and multi-agent framework.
  
- # Automated Daily News Podcast Generation
  - This project aims to develop a sophisticated toolchain using FastAPI and OpenWebUI to automate the creation of a daily news podcast. The goal is to seamlessly integrate various modules and pipelines to process breaking news items, focusing on selecting interesting and unusual combinations of topics. The system will generate structured content through a multi-agent approach, mediated by a single API interface, ultimately producing a compelling podcast featuring two interlocutors, Bob and Sue.
  
- ## Workflow Overview
  
  - **Parse Logseq**: A Logseq executed Python block parses the current Logseq markdown page to find the IP address of the OpenWebUI server specified here:
    - ```text
      192.168.0.51
      ```
      
  - **Request the Model List**: Use the OpenWebUI API to request the model list from the IP address specified above and the access token provided below:
    - ```text
      Authorization: Bearer sk-6f3f39171ba247b4a66093287305fabc
      ```
  
  - Python code to replace the curl command:
    - ```python
      import requests
      import json

      # Set up the request headers and URL
      headers = {
          "accept": "application/json",
          "Authorization": "Bearer sk-6f3f39171ba247b4a66093287305fabc"
      }
      url = "http://192.168.0.51:3000/api/v1/models/?id="

      # Make the GET request
      response = requests.get(url, headers=headers)

      # Parse the response
      if response.status_code == 200:
          models = response.json()
          model_names = [model['name'] for model in models]
           # Print the model names (we assume logseq will show them)
          print("\n".join(model_names)) 
      else:
          print("Failed to fetch models:", response.status_code, response.text)
    ```
      - {{evalparent}}
  
  - **List is returned**: and should be written directly into this Logseq page in the block labelled below the code:
    - ## Model List
      - ```text
        Models returned from the OpenWebUI API should be listed here, one model name per line.
        ```
        
  - **Select Agent Models**: The user can copy and paste model names into the agent slots here.
    - ## Nominated Agents
      - Web Search
        - ```text
          Perplexity
          ```
      - Rating the news
        - ```text
          Mistral 8B
          ```
        
  - **Loading Topics**: Search the Logseq knowledge graph for pages tagged as public and list any pages above 100kb in size.
    - ```python
      import js
      
      def list_public_pages():
          try:
              pages = js.logseq.api.get_all_pages()
              public_pages = []
              for page in pages:
                  page_name = page.originalName
                  # Get the first block of the page, typically containing metadata
                  content = js.logseq.api.get_page_blocks_tree(page_name)
                  if content and "public:: true" in content[0].content:
                      public_pages.append(page_name)
              return public_pages
          except Exception as e:
              js.logseq.api.show_msg(f"Error in list_public_pages: {e}", {'timeout': 5000})
              return []
      
      def main():
          public_pages = list_public_pages()
          if public_pages:
              result = "\n".join(public_pages)
          else:
              result = "No public pages found."
          print(result)  # Ensuring the result is printed for logseq to capture
          return result

      # Execute the main function
      main()
      ```
      - {{evalparent}}
    - ## Topics with more than 100kb
      - Topic 1
      - Topic 2
      - This list should be replaced inside this file by the code.
      
  - **User Elects Topics**: Present the public list to the user as line-separated topics. The user selects their topics of choice by deleting unimportant lines. This selection remains stored in the Logseq page.
  
  - **Randomly Select Topics**: Next, executable Logseq code selects 2 or 3 topics at random from the list of elected topics. It updates the Logseq block below:
    - ### Trying these topics
      - Topic 1
      - Topic 2
      - Topic 3
      
  - **Searching for News**: The same code block calls the Perplexity pipeline using the OpenWebUI unified API to search for breaking news items that intersect with the randomly loaded topics.
  
  - **Ranking Importance**: Evaluate the returned news items using a locally hosted Mixtral 8B LLM, called from the list of available models. Request a score on likely impact and public interest on a scale from 1 to 10.
  
  - **Branching Factor**: If the news item scores above 8, pass the Perplexity-generated content to GPT-4. Otherwise, select another 2 or 3 public-tagged topics and repeat. The process can be attempted a maximum of 10 times. If 10 attempts do not surface a news item of worth, alert the user in the Logseq output.
  
  - **Extract Web Links**: Create a simple list of raw URLs found in the Perplexity response and remove duplicates.
  
  - **Detailed Information Scraping**: Process the identified links using the web scraper module from the models list in OpenWebUI to fetch in-depth summaries and additional content from the linked pages.
  
  - **Or Progress News Item**: Use the GPT4oV model from the OpenWebUI models list to process the raw Perplexity response and all ancillary summaries gathered from the web scraper. Return a detailed and highly technical description of the news item in JSON format, with web URLs and their summaries carefully segmented and linked as a knowledge graph.
  
  - **Enhancing with RAG**: Send the text elements of the GPT4-generated JSON to the RAGflow module in the models list, requesting that the knowledge be modified to include any opinions and ideas from the RAG corpus that intersect with the news item. Save the response to a Logseq block titled # Story Plus RAG.
  
  - **Generating Podcast Script**: Use Claude 3.5 to create a podcast script based on few-shot examples from the Logseq page labelled [[example podcast dialogue]]. Send the RAGflow-enhanced news story and the JSON-structured web links and summaries. The script should alternate dialogue between Bob and Sue, incorporating brief mentions of the web sources available in the episode notes. The returned JSON from Claude 3.5 should have field identifiers for Bob and Sue.
  
  - **Splitting Script**: Divide the podcast script into parts for Bob and Sue, creating two new JSON files with sequence numbers for the conversation.
  
  - **Text to Voice Conversion**: Pass both scripts to text-to-voice engines to generate the audio for Bob and Sue's lines respectively. Insist that the audio be returned with sequence numbers.
  
  - **Inline Python Code Block Creates WAV File**: Placeholder for now.
  
  - **Synchronization with Metahuman**: Synchronize the generated audio tracks with Metahuman talking heads in Unreal Engine to create a lifelike rendering of the podcast episode.
  
- ## Workflow Diagram
  
  ```mermaid
  graph TD
    A[Parse Logseq] --> B[Request Model List]
    B --> C[Model List Returned]
    C --> D[Select Agent Models]
    D --> E[Loading Topics]
    E --> F[User Elects Topics]
    F --> G[Randomly Select Topics]
    G --> H[Searching for News]
    H --> I[Ranking Importance]
    I -->|Score > 8| K[Process with GPT-4]
    I -->|Score <= 8| J[Select New Topics]
    K --> L[Extract Web Links]
    L --> M[Detailed Information Scraping]
    M --> N[Enhance with RAGflow]
    N --> O[Generating Podcast Script]
    O --> P[Split Script]
    P --> Q[Text to Voice Conversion]
    Q --> R[Create WAV File]
    R --> S[Synchronize with Metahuman]
  ```
  
- ## Sequence Diagram
  ```mermaid
  sequenceDiagram
    participant User
    participant Logseq
    participant API
    participant Models
    participant Perplexity
    participant Mixtral
    participant GPT4
    participant Scraper
    participant Claude
    participant TTS
    User->>Logseq: Trigger Python Script
    Logseq->>API: Request Model List
    API->>Logseq: Return Model List
    Logseq->>User: Display Model List
    User->>Logseq: Select Agent Models
    Logseq->>User: Display Public Pages
    User->>Logseq: Elect Topics
    Logseq->>Logseq: Randomly Select Topics
    Logseq->>Perplexity: Search for News
    Perplexity->>Logseq: Return News Items
    Logseq->>Mixtral: Rank News Items
    Mixtral->>Logseq: Return Scores
    alt Score > 8
      Logseq->>GPT4: Process with GPT-4
      GPT4->>Logseq: Return Detailed Info
      Logseq->>API: Extract Web Links
      API->>Logseq: Return Links
      Logseq->>Scraper: Scrape Details
      Scraper->>Logseq: Return Summaries
      Logseq->>RAG: Enhance with RAG
      RAG->>Logseq: Return Enhanced Story
      Logseq->>Claude: Generate Podcast Script
      Claude->>Logseq: Return Podcast Script
      Logseq->>TTS: Convert Text to Voice
      TTS->>Logseq: Return Audio
      Logseq->>Unreal: Sync with Metahuman
    else Score <= 8
      Logseq->>Logseq: Select New Topics
    end
  ```
  
- ## Implementation Details
  - The toolchain will be orchestrated by a Python script that interacts with the filesystem and calls the necessary APIs. The script will be modular, with each task encapsulated in its own function, including robust logging, configuration management, state management, unit tests, and documentation.
  
- ### Main Functions
    1. `load_topics()`: Reads a list of topics from a file.
    2. `search_news_items(topics)`: Uses Perplexity to search for news items related to the given topics.
    3. `rank_news_items(items)`: Uses Mixtral 8B LLM to rank the news items, returning a list of items with a score from 1 to 10.
    4. `process_high_score_items(items)`: Filters items with scores above 8, uses GPT-4 to restructure the items into technical essays, and isolates web links.
    5. `scrape_details(links)`: Uses a web scraper module to fetch detailed summaries from the links.
    6. `create_podcast_script(story, summaries)`: Uses Claude 3.5 and RAGflow corpus to create a podcast script.
    7. `split_script(script)`: Splits the script between two interlocutors: Bob and Sue.
    8. `text_to_voice(lines, person)`: Uses text-to-voice engines to convert lines into audio for Bob and Sue.
    9. `sync_with_metahuman(bob_audio, sue_audio)`: Syncs the audio with Metahuman talking heads over a network connection to Unreal Engine.
    
- ## Next Steps
  1. Implement the Python script with the outlined functions and best practices.
  2. Set up the necessary APIs and modules (FastAPI, OpenWebUI, Perplexity, Mixtral 8B LLM, GPT-4, Claude 3.5, RAGflow, web scraper, text-to-voice engines, Metahuman, Unreal Engine).
  3. Test and refine the toolchain, ensuring smooth integration and reliable performance.
  4. Document the setup, usage, and maintenance of the toolchain for future reference and collaboration.
  
By following this plan, we can develop a robust and efficient toolchain for automating the creation of daily news podcasts, delivering engaging and informative content to our audience.

---

Feel free to copy this complete and corrected version back into your Logseq environment for execution. Let me know if there's anything else you need assistance with!

